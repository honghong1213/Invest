import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import ta
import ssl
import certifi

# SSL Ïù∏Ï¶ùÏÑú Î¨∏Ï†ú Ìï¥Í≤∞
ssl._create_default_https_context = ssl._create_unverified_context

# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="Í∏ÄÎ°úÎ≤å Ìà¨Ïûê ÎåÄÏãúÎ≥¥Îìú",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ÏûêÏÇ∞ Ï†ïÏùò
ASSETS = {
    "Ï£ºÍ∞ÄÏßÄÏàò": {
        "üá∞üá∑ KOSPI": "^KS11",
        "üá∫üá∏ S&P 500": "^GSPC",
        "üá∫üá∏ ÎÇòÏä§Îã•": "^IXIC",
        "üá∫üá∏ Îã§Ïö∞Ï°¥Ïä§": "^DJI",
        "üá®üá≥ ÏÉÅÌï¥Ï¢ÖÌï©": "000001.SS",
        "üáØüáµ ÎãõÏºÄÏù¥225": "^N225",
        "üá©üá™ DAX": "^GDAXI",
        "üá¨üáß FTSE 100": "^FTSE",
    },
    "Ï±ÑÍ∂å": {
        "ÎØ∏Íµ≠ 10ÎÖÑ Íµ≠Ï±Ñ": "^TNX",
        "ÎØ∏Íµ≠ 2ÎÖÑ Íµ≠Ï±Ñ": "^IRX",
        "ÎØ∏Íµ≠ 30ÎÖÑ Íµ≠Ï±Ñ": "^TYX",
    },
    "ÏÉÅÌíà": {
        "Í∏à (Gold)": "GC=F",
        "ÏùÄ (Silver)": "SI=F",
        "WTI ÏõêÏú†": "CL=F",
        "Ï≤úÏó∞Í∞ÄÏä§": "NG=F",
        "Íµ¨Î¶¨": "HG=F",
    },
    "ÏïîÌò∏ÌôîÌèê": {
        "ÎπÑÌä∏ÏΩîÏù∏": "BTC-USD",
        "Ïù¥ÎçîÎ¶¨ÏõÄ": "ETH-USD",
    }
}

# Ï∫êÏãúÎ•º ÏÇ¨Ïö©Ìïú Îç∞Ïù¥ÌÑ∞ Î°úÎî©
@st.cache_data(ttl=300)  # 5Î∂Ñ Ï∫êÏãú
def load_data(ticker, period="1y"):
    """
    Ìã∞Ïª§ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    """
    try:
        # SSL Í≤ÄÏ¶ù ÎπÑÌôúÏÑ±ÌôîÌïòÏó¨ Îç∞Ïù¥ÌÑ∞ Îã§Ïö¥Î°úÎìú
        data = yf.download(ticker, period=period, progress=False)
        if data.empty:
            return None
        
        # Multi-level columnsÏùÑ flatÌïòÍ≤å Î≥ÄÌôò
        if isinstance(data.columns, pd.MultiIndex):
            data.columns = data.columns.get_level_values(0)
        
        return data
    except Exception as e:
        st.error(f"Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: {ticker} - {str(e)}")
        return None

def calculate_indicators(data):
    """
    Í∏∞Ïà†Ï†Å ÏßÄÌëú Í≥ÑÏÇ∞
    """
    df = data.copy()
    
    # Close Ïª¨ÎüºÏù¥ SeriesÏù∏ÏßÄ ÌôïÏù∏ÌïòÍ≥† Î≥ÄÌôò
    close_series = df['Close'].squeeze() if hasattr(df['Close'], 'squeeze') else df['Close']
    
    # Ïù¥ÎèôÌèâÍ∑†ÏÑ†
    df['MA20'] = close_series.rolling(window=20).mean()
    df['MA50'] = close_series.rolling(window=50).mean()
    df['MA200'] = close_series.rolling(window=200).mean()
    
    # RSI (Í∏∞Í∞Ñ 14, Signal 6)
    rsi_indicator = ta.momentum.RSIIndicator(close_series, window=14)
    df['RSI'] = rsi_indicator.rsi()
    df['RSI_Signal'] = df['RSI'].rolling(window=6).mean()
    
    # MACD (Îã®Í∏∞12, Ïû•Í∏∞26, Signal 9)
    macd = ta.trend.MACD(close_series, window_slow=26, window_fast=12, window_sign=9)
    df['MACD'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    df['MACD_Hist'] = macd.macd_diff()
    
    # Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú (Í∏∞Í∞Ñ 18, ÏäπÏàò 2.0)
    bollinger = ta.volatility.BollingerBands(close_series, window=18, window_dev=2.0)
    df['BB_Upper'] = bollinger.bollinger_hband()
    df['BB_Middle'] = bollinger.bollinger_mavg()
    df['BB_Lower'] = bollinger.bollinger_lband()
    
    # Ïä§ÌÜ†Ï∫êÏä§Ìã± Ïä¨Î°úÏö∞ (Í∏∞Í∞Ñ 10, %K 6, %D 6)
    stoch = ta.momentum.StochasticOscillator(
        high=df['High'].squeeze() if hasattr(df['High'], 'squeeze') else df['High'],
        low=df['Low'].squeeze() if hasattr(df['Low'], 'squeeze') else df['Low'],
        close=close_series,
        window=10,
        smooth_window=6
    )
    df['Stoch_K'] = stoch.stoch()
    df['Stoch_D'] = stoch.stoch_signal()
    
    # ÏùºÎ™©Í∑†ÌòïÌëú (Ichimoku)
    ichimoku = ta.trend.IchimokuIndicator(
        high=df['High'].squeeze() if hasattr(df['High'], 'squeeze') else df['High'],
        low=df['Low'].squeeze() if hasattr(df['Low'], 'squeeze') else df['Low']
    )
    df['Ichimoku_Conversion'] = ichimoku.ichimoku_conversion_line()  # Ï†ÑÌôòÏÑ† (9Ïùº)
    df['Ichimoku_Base'] = ichimoku.ichimoku_base_line()  # Í∏∞Ï§ÄÏÑ† (26Ïùº)
    df['Ichimoku_A'] = ichimoku.ichimoku_a()  # ÏÑ†ÌñâÏä§Ìå¨A
    df['Ichimoku_B'] = ichimoku.ichimoku_b()  # ÏÑ†ÌñâÏä§Ìå¨B
    
    # ÌõÑÌñâÏä§Ìå¨ Í≥ÑÏÇ∞ (ÎãπÏùº Ï¢ÖÍ∞ÄÎ•º 26Ïùº Ï†ÑÏóê ÌëúÏãú)
    df['Ichimoku_Lagging'] = close_series.shift(-26)
    
    return df

def create_chart(data, title):
    """
    PlotlyÎ•º ÏÇ¨Ïö©Ìïú Ïù∏ÌÑ∞ÎûôÌã∞Î∏å Ï∞®Ìä∏ ÏÉùÏÑ±
    """
    # ÏÑúÎ∏åÌîåÎ°Ø ÏÉùÏÑ±: Í∞ÄÍ≤©, Í±∞ÎûòÎüâ, RSI, Stochastic, MACD
    fig = make_subplots(
        rows=5, cols=1,
        shared_xaxes=True,
        vertical_spacing=0.02,
        subplot_titles=(f'{title} Í∞ÄÍ≤©', 'Í±∞ÎûòÎüâ', 'RSI', 'Stochastic Slow', 'MACD'),
        row_heights=[0.4, 0.15, 0.15, 0.15, 0.15]
    )
    
    # Ï∫îÎì§Ïä§Ìã± Ï∞®Ìä∏ (ÏÉÅÏäπ: Îπ®Í∞ï, ÌïòÎùΩ: ÌååÎûë)
    fig.add_trace(
        go.Candlestick(
            x=data.index,
            open=data['Open'],
            high=data['High'],
            low=data['Low'],
            close=data['Close'],
            name='Í∞ÄÍ≤©',
            increasing_line_color='red',
            decreasing_line_color='blue',
            increasing_fillcolor='red',
            decreasing_fillcolor='blue'
        ),
        row=1, col=1
    )
    
    # Ïù¥ÎèôÌèâÍ∑†ÏÑ†
    fig.add_trace(go.Scatter(x=data.index, y=data['MA20'], name='MA20', line=dict(color='orange', width=1)), row=1, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['MA50'], name='MA50', line=dict(color='blue', width=1)), row=1, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['MA200'], name='MA200', line=dict(color='red', width=1)), row=1, col=1)
    
    # Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú
    fig.add_trace(go.Scatter(x=data.index, y=data['BB_Upper'], name='BB Upper', line=dict(color='gray', width=1, dash='dash')), row=1, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['BB_Lower'], name='BB Lower', line=dict(color='gray', width=1, dash='dash')), row=1, col=1)
    
    # ÏùºÎ™©Í∑†ÌòïÌëú
    fig.add_trace(go.Scatter(x=data.index, y=data['Ichimoku_Conversion'], name='Ï†ÑÌôòÏÑ†(9)', line=dict(color='cyan', width=1)), row=1, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['Ichimoku_Base'], name='Í∏∞Ï§ÄÏÑ†(26)', line=dict(color='magenta', width=1)), row=1, col=1)
    
    # ÌõÑÌñâÏä§Ìå¨ (26Ïùº Îí§Î°ú Ïù¥Îèô)
    fig.add_trace(go.Scatter(x=data.index, y=data['Ichimoku_Lagging'], name='ÌõÑÌñâÏä§Ìå¨(26)', line=dict(color='orange', width=1, dash='dot')), row=1, col=1)
    
    # ÏùºÎ™©Í∑†ÌòïÌëú Íµ¨Î¶ÑÎåÄ - ÏñëÏö¥(Îπ®Í∞ï)Í≥º ÏùåÏö¥(ÌååÎûë) Íµ¨Î∂Ñ
    # ÏÑ†ÌñâÏä§Ìå¨AÏôÄ BÎ•º ÎπÑÍµêÌïòÏó¨ ÏÉâÏÉÅ Í≤∞Ï†ï
    for i in range(len(data)):
        if i == 0:
            continue
        
        span_a_curr = data['Ichimoku_A'].iloc[i]
        span_b_curr = data['Ichimoku_B'].iloc[i]
        span_a_prev = data['Ichimoku_A'].iloc[i-1]
        span_b_prev = data['Ichimoku_B'].iloc[i-1]
        
        # ÏñëÏö¥ (ÏÑ†ÌñâÏä§Ìå¨A > ÏÑ†ÌñâÏä§Ìå¨B): Îπ®Í∞ÑÏÉâ
        if span_a_curr >= span_b_curr:
            fig.add_trace(go.Scatter(
                x=[data.index[i-1], data.index[i]],
                y=[span_a_prev, span_a_curr],
                fill=None,
                mode='lines',
                line=dict(width=0),
                showlegend=False,
                hoverinfo='skip'
            ), row=1, col=1)
            
            fig.add_trace(go.Scatter(
                x=[data.index[i-1], data.index[i]],
                y=[span_b_prev, span_b_curr],
                fill='tonexty',
                mode='lines',
                line=dict(width=0),
                fillcolor='rgba(255, 0, 0, 0.2)',
                showlegend=False,
                hoverinfo='skip'
            ), row=1, col=1)
        # ÏùåÏö¥ (ÏÑ†ÌñâÏä§Ìå¨A < ÏÑ†ÌñâÏä§Ìå¨B): ÌååÎûÄÏÉâ
        else:
            fig.add_trace(go.Scatter(
                x=[data.index[i-1], data.index[i]],
                y=[span_a_prev, span_a_curr],
                fill=None,
                mode='lines',
                line=dict(width=0),
                showlegend=False,
                hoverinfo='skip'
            ), row=1, col=1)
            
            fig.add_trace(go.Scatter(
                x=[data.index[i-1], data.index[i]],
                y=[span_b_prev, span_b_curr],
                fill='tonexty',
                mode='lines',
                line=dict(width=0),
                fillcolor='rgba(0, 0, 255, 0.2)',
                showlegend=False,
                hoverinfo='skip'
            ), row=1, col=1)
    
    # ÏÑ†ÌñâÏä§Ìå¨ ÎùºÏù∏ ÌëúÏãú
    fig.add_trace(go.Scatter(
        x=data.index, 
        y=data['Ichimoku_A'], 
        name='ÏÑ†ÌñâÏä§Ìå¨A', 
        line=dict(color='green', width=1),
        showlegend=True
    ), row=1, col=1)
    
    fig.add_trace(go.Scatter(
        x=data.index, 
        y=data['Ichimoku_B'], 
        name='ÏÑ†ÌñâÏä§Ìå¨B', 
        line=dict(color='red', width=1),
        showlegend=True
    ), row=1, col=1)
    
    # Í±∞ÎûòÎüâ (ÏÉÅÏäπ: Îπ®Í∞ï, ÌïòÎùΩ: ÌååÎûë)
    colors = ['red' if close >= open_ else 'blue' for close, open_ in zip(data['Close'], data['Open'])]
    fig.add_trace(
        go.Bar(x=data.index, y=data['Volume'], name='Í±∞ÎûòÎüâ', marker_color=colors),
        row=2, col=1
    )
    
    # RSI
    fig.add_trace(go.Scatter(x=data.index, y=data['RSI'], name='RSI', line=dict(color='purple', width=2)), row=3, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['RSI_Signal'], name='RSI Signal', line=dict(color='orange', width=1.5)), row=3, col=1)
    fig.add_hline(y=70, line_dash="dash", line_color="red", row=3, col=1)
    fig.add_hline(y=30, line_dash="dash", line_color="green", row=3, col=1)
    
    # Stochastic Slow
    fig.add_trace(go.Scatter(x=data.index, y=data['Stoch_K'], name='%K (6)', line=dict(color='blue', width=2)), row=4, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['Stoch_D'], name='%D (6)', line=dict(color='red', width=2)), row=4, col=1)
    fig.add_hline(y=80, line_dash="dash", line_color="red", row=4, col=1)
    fig.add_hline(y=20, line_dash="dash", line_color="green", row=4, col=1)
    
    # MACD
    fig.add_trace(go.Scatter(x=data.index, y=data['MACD'], name='MACD', line=dict(color='blue', width=2)), row=5, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['MACD_Signal'], name='Signal', line=dict(color='red', width=2)), row=5, col=1)
    fig.add_trace(go.Bar(x=data.index, y=data['MACD_Hist'], name='Histogram', marker_color='gray'), row=5, col=1)
    
    # Î†àÏù¥ÏïÑÏõÉ ÏóÖÎç∞Ïù¥Ìä∏
    fig.update_layout(
        height=1200,
        showlegend=True,
        xaxis_rangeslider_visible=False,
        hovermode='x unified'
    )
    
    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    return fig

def create_simple_chart(data, title):
    """
    Í∞ÄÍ≤© Ï∞®Ìä∏Îßå ÏûàÎäî Í∞ÑÎã®Ìïú Ï∞®Ìä∏ ÏÉùÏÑ± (Î≥¥Ï°∞ÏßÄÌëú Ï†úÏô∏)
    """
    fig = go.Figure()
    
    # Ï∫îÎì§Ïä§Ìã± Ï∞®Ìä∏ (ÏÉÅÏäπ: Îπ®Í∞ï, ÌïòÎùΩ: ÌååÎûë)
    fig.add_trace(
        go.Candlestick(
            x=data.index,
            open=data['Open'],
            high=data['High'],
            low=data['Low'],
            close=data['Close'],
            name='Í∞ÄÍ≤©',
            increasing_line_color='red',
            decreasing_line_color='blue',
            increasing_fillcolor='red',
            decreasing_fillcolor='blue'
        )
    )
    
    # Ïù¥ÎèôÌèâÍ∑†ÏÑ†
    fig.add_trace(go.Scatter(x=data.index, y=data['MA20'], name='MA20', line=dict(color='orange', width=1)))
    fig.add_trace(go.Scatter(x=data.index, y=data['MA50'], name='MA50', line=dict(color='blue', width=1)))
    fig.add_trace(go.Scatter(x=data.index, y=data['MA200'], name='MA200', line=dict(color='red', width=1)))
    
    # Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú
    fig.add_trace(go.Scatter(x=data.index, y=data['BB_Upper'], name='BB Upper', line=dict(color='gray', width=1, dash='dash')))
    fig.add_trace(go.Scatter(x=data.index, y=data['BB_Lower'], name='BB Lower', line=dict(color='gray', width=1, dash='dash')))
    
    # ÏùºÎ™©Í∑†ÌòïÌëú
    fig.add_trace(go.Scatter(x=data.index, y=data['Ichimoku_Conversion'], name='Ï†ÑÌôòÏÑ†(9)', line=dict(color='cyan', width=1)))
    fig.add_trace(go.Scatter(x=data.index, y=data['Ichimoku_Base'], name='Í∏∞Ï§ÄÏÑ†(26)', line=dict(color='magenta', width=1)))
    
    # ÌõÑÌñâÏä§Ìå¨ (26Ïùº Îí§Î°ú Ïù¥Îèô)
    fig.add_trace(go.Scatter(x=data.index, y=data['Ichimoku_Lagging'], name='ÌõÑÌñâÏä§Ìå¨(26)', line=dict(color='orange', width=1, dash='dot')))
    
    # ÏùºÎ™©Í∑†ÌòïÌëú Íµ¨Î¶ÑÎåÄ - ÏñëÏö¥(Îπ®Í∞ï)Í≥º ÏùåÏö¥(ÌååÎûë) Íµ¨Î∂Ñ
    for i in range(len(data)):
        if i == 0:
            continue
        
        span_a_curr = data['Ichimoku_A'].iloc[i]
        span_b_curr = data['Ichimoku_B'].iloc[i]
        span_a_prev = data['Ichimoku_A'].iloc[i-1]
        span_b_prev = data['Ichimoku_B'].iloc[i-1]
        
        # ÏñëÏö¥ (ÏÑ†ÌñâÏä§Ìå¨A > ÏÑ†ÌñâÏä§Ìå¨B): Îπ®Í∞ÑÏÉâ
        if span_a_curr >= span_b_curr:
            fig.add_trace(go.Scatter(
                x=[data.index[i-1], data.index[i]],
                y=[span_a_prev, span_a_curr],
                fill=None,
                mode='lines',
                line=dict(width=0),
                showlegend=False,
                hoverinfo='skip'
            ))
            
            fig.add_trace(go.Scatter(
                x=[data.index[i-1], data.index[i]],
                y=[span_b_prev, span_b_curr],
                fill='tonexty',
                mode='lines',
                line=dict(width=0),
                fillcolor='rgba(255, 0, 0, 0.2)',
                showlegend=False,
                hoverinfo='skip'
            ))
        # ÏùåÏö¥ (ÏÑ†ÌñâÏä§Ìå¨A < ÏÑ†ÌñâÏä§Ìå¨B): ÌååÎûÄÏÉâ
        else:
            fig.add_trace(go.Scatter(
                x=[data.index[i-1], data.index[i]],
                y=[span_a_prev, span_a_curr],
                fill=None,
                mode='lines',
                line=dict(width=0),
                showlegend=False,
                hoverinfo='skip'
            ))
            
            fig.add_trace(go.Scatter(
                x=[data.index[i-1], data.index[i]],
                y=[span_b_prev, span_b_curr],
                fill='tonexty',
                mode='lines',
                line=dict(width=0),
                fillcolor='rgba(0, 0, 255, 0.2)',
                showlegend=False,
                hoverinfo='skip'
            ))
    
    # ÏÑ†ÌñâÏä§Ìå¨ ÎùºÏù∏ ÌëúÏãú
    fig.add_trace(go.Scatter(
        x=data.index, 
        y=data['Ichimoku_A'], 
        name='ÏÑ†ÌñâÏä§Ìå¨A', 
        line=dict(color='green', width=1),
        showlegend=True
    ))
    
    fig.add_trace(go.Scatter(
        x=data.index, 
        y=data['Ichimoku_B'], 
        name='ÏÑ†ÌñâÏä§Ìå¨B', 
        line=dict(color='red', width=1),
        showlegend=True
    ))
    
    # Î†àÏù¥ÏïÑÏõÉ ÏóÖÎç∞Ïù¥Ìä∏
    fig.update_layout(
        title=title,
        height=600,
        showlegend=True,
        xaxis_rangeslider_visible=False,
        hovermode='x unified'
    )
    
    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    return fig

def create_mini_chart(data, title):
    """
    ÎØ∏Îãà Ï∞®Ìä∏ ÏÉùÏÑ± (Ï¢ÖÎ™© Ïä§ÌÅ¨Î¶¨ÎãùÏö©)
    """
    mini_fig = go.Figure()
    mini_fig.add_trace(go.Candlestick(
        x=data.index[-60:],
        open=data['Open'][-60:],
        high=data['High'][-60:],
        low=data['Low'][-60:],
        close=data['Close'][-60:],
        increasing_line_color='red',
        decreasing_line_color='blue',
        increasing_fillcolor='red',
        decreasing_fillcolor='blue',
        showlegend=False,
        name='Í∞ÄÍ≤©'
    ))
    
    # Ïù¥ÎèôÌèâÍ∑†ÏÑ† Ï∂îÍ∞Ä
    mini_fig.add_trace(go.Scatter(
        x=data.index[-60:],
        y=data['MA20'][-60:],
        name='MA20',
        line=dict(color='orange', width=1)
    ))
    
    # Î≥ºÎ¶∞Ï†ÄÎ∞¥Îìú Ï∂îÍ∞Ä
    mini_fig.add_trace(go.Scatter(
        x=data.index[-60:],
        y=data['BB_Upper'][-60:],
        name='BBÏÉÅÎã®',
        line=dict(color='gray', width=1, dash='dash'),
        showlegend=False
    ))
    
    mini_fig.add_trace(go.Scatter(
        x=data.index[-60:],
        y=data['BB_Lower'][-60:],
        name='BBÌïòÎã®',
        line=dict(color='gray', width=1, dash='dash'),
        fill='tonexty',
        fillcolor='rgba(128, 128, 128, 0.1)',
        showlegend=False
    ))
    
    # ÌõÑÌñâÏä§Ìå¨ Ï∂îÍ∞Ä
    mini_fig.add_trace(go.Scatter(
        x=data.index[-60:],
        y=data['Ichimoku_Lagging'][-60:],
        name='ÌõÑÌñâÏä§Ìå¨',
        line=dict(color='orange', width=2, dash='dot')
    ))
    
    mini_fig.update_layout(
        title=title,
        height=250,
        margin=dict(l=0, r=0, t=30, b=0),
        xaxis_rangeslider_visible=False,
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1,
            font=dict(size=8)
        ),
        xaxis=dict(showticklabels=False),
        yaxis=dict(side='right')
    )
    
    return mini_fig

def screen_kospi_stocks():
    """
    KOSPI 100Í∞ú Ï¢ÖÎ™© Ïä§ÌÅ¨Î¶¨Îãù
    Ï°∞Í±¥: 20Ïùº Ïã†Í≥†Í∞Ä AND ÌõÑÌñâÏä§Ìå¨Ïù¥ Î≥ºÎ¶∞Ï†ÄÎ∞¥Îìú ÏÉÅÎã®ÏùÑ ÎèåÌååÌïú Ï¢ÖÎ™©
    """
    # KOSPI Ï£ºÏöî Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏ (100Í∞ú)
    kospi_symbols = {
        # IT/Î∞òÎèÑÏ≤¥ (22Í∞ú)
        "ÏÇºÏÑ±Ï†ÑÏûê": "005930.KS",
        "SKÌïòÏù¥ÎãâÏä§": "000660.KS",
        "LGÏóêÎÑàÏßÄÏÜîÎ£®ÏÖò": "373220.KS",
        "ÏÇºÏÑ±SDI": "006400.KS",
        "LGÏ†ÑÏûê": "066570.KS",
        "ÏÇºÏÑ±Ï†ÑÍ∏∞": "009150.KS",
        "SKÏä§ÌÄòÏñ¥": "402340.KS",
        "HDÌòÑÎåÄÏùºÎ†âÌä∏Î¶≠": "267260.KS",
        "LGÎîîÏä§ÌîåÎ†àÏù¥": "034220.KS",
        "SKÌïòÏù¥ÎãâÏä§Ïö∞": "000665.KS",
        "ÏÇºÏÑ±Ï†ÑÏûêÏö∞": "005935.KS",
        "ÌååÌä∏Î°†": "091700.KS",
        "ÏóòÏóêÏä§ÏùºÎ†âÌä∏Î¶≠": "010120.KS",
        "ÏïÑÎ™®ÌÖç": "052710.KS",
        "Îç¥Ìã∞ÏõÄ": "145720.KS",
        "ÌîºÏóêÏä§ÏºÄÏù¥": "319660.KS",
        "ÌîºÏóêÏä§ÏºÄÏù¥ÌôÄÎî©Ïä§": "031980.KS",
        "ÏóêÏä§ÏóêÌîÑÏóêÏù¥": "056190.KS",
        "ÏõêÏùµIPS": "240810.KS",
        "Î¶¨ÎÖ∏Í≥µÏóÖ": "058470.KS",
        "ÌÖåÏä§": "095610.KS",
        "ÎîîÎ∞îÏù¥Ïä§Ïù¥ÏóîÏßÄ": "187870.KS",
        
        # Î∞îÏù¥Ïò§/Ï†úÏïΩ (8Í∞ú)
        "ÏÇºÏÑ±Î∞îÏù¥Ïò§Î°úÏßÅÏä§": "207940.KS",
        "ÏÖÄÌä∏Î¶¨Ïò®": "068270.KS",
        "ÏÖÄÌä∏Î¶¨Ïò®Ìó¨Ïä§ÏºÄÏñ¥": "091990.KS",
        "ÌïúÎØ∏ÏïΩÌíà": "128940.KS",
        "Ïú†ÌïúÏñëÌñâ": "000100.KS",
        "Ïã†ÎùºÏ††": "215600.KS",
        "Î©îÎîîÌÜ°Ïä§": "086900.KS",
        "ÎÖπÏã≠Ïûê": "006280.KS",
        
        # ÏûêÎèôÏ∞®/Î∂ÄÌíà (7Í∞ú)
        "ÌòÑÎåÄÏ∞®": "005380.KS",
        "Í∏∞ÏïÑ": "000270.KS",
        "ÌòÑÎåÄÎ™®ÎπÑÏä§": "012330.KS",
        "ÌòÑÎåÄÏúÑÏïÑ": "011210.KS",
        "ÎßåÎèÑ": "204320.KS",
        "ÌòÑÎåÄÍ∏ÄÎ°úÎπÑÏä§": "086280.KS",
        "ÌòÑÎåÄÏ∞®Ïö∞": "005385.KS",
        
        # ÌôîÌïô/ÏÜåÏû¨ (13Í∞ú)
        "LGÌôîÌïô": "051910.KS",
        "Ìè¨Ïä§ÏΩîÌôÄÎî©Ïä§": "005490.KS",
        "SKÏù¥ÎÖ∏Î≤†Ïù¥ÏÖò": "096770.KS",
        "POSCO DX": "022100.KS",
        "Î°ØÎç∞ÏºÄÎØ∏Ïπº": "011170.KS",
        "ÌïúÌôîÏÜîÎ£®ÏÖò": "009830.KS",
        "ÏΩîÏò§Î°±Ïù∏Îçî": "120110.KS",
        "Ìö®ÏÑ±Ìã∞Ïï§Ïî®": "298020.KS",
        "Ìö®ÏÑ±Ï≤®Îã®ÏÜåÏû¨": "298050.KS",
        "SKC": "011790.KS",
        "SKCÏö∞": "011795.KS",
        "OCI": "010060.KS",
        "ÌõÑÏÑ±": "093370.KS",
        
        # Í±¥ÏÑ§/Ï§ëÍ≥µÏóÖ (10Í∞ú)
        "ÏÇºÏÑ±Î¨ºÏÇ∞": "028260.KS",
        "ÌòÑÎåÄÍ±¥ÏÑ§": "000720.KS",
        "GSÍ±¥ÏÑ§": "006360.KS",
        "ÎåÄÎ¶ºÏÇ∞ÏóÖ": "000210.KS",
        "ÎåÄÏö∞Í±¥ÏÑ§": "047040.KS",
        "ÌòÑÎåÄÏ§ëÍ≥µÏóÖÏßÄÏ£º": "267250.KS",
        "ÏÇºÏÑ±Ï§ëÍ≥µÏóÖ": "010140.KS",
        "ÎåÄÌïúÏ°∞ÏÑ†": "042660.KS",
        "ÎëêÏÇ∞Î∞•Ï∫£": "241560.KS",
        "ÎëêÏÇ∞ÏóêÎÑàÎπåÎ¶¨Ìã∞": "034020.KS",
        
        # Í∏àÏúµ (10Í∞ú)
        "KBÍ∏àÏúµ": "105560.KS",
        "Ïã†ÌïúÏßÄÏ£º": "055550.KS",
        "ÌïòÎÇòÍ∏àÏúµÏßÄÏ£º": "086790.KS",
        "Ïö∞Î¶¨Í∏àÏúµÏßÄÏ£º": "316140.KS",
        "ÏÇºÏÑ±ÏÉùÎ™Ö": "032830.KS",
        "ÌïúÌôîÏÉùÎ™Ö": "088350.KS",
        "ÏÇºÏÑ±ÌôîÏû¨": "000810.KS",
        "Î©îÎ¶¨Ï∏†Í∏àÏúµÏßÄÏ£º": "138040.KS",
        "DBÏÜêÌï¥Î≥¥Ìóò": "005830.KS",
        "ÏÇºÏÑ±Ï¶ùÍ∂å": "016360.KS",
        
        # ÏóêÎÑàÏßÄ/Ïú†Ìã∏Î¶¨Ìã∞ (6Í∞ú)
        "ÌïúÍµ≠Ï†ÑÎ†•": "015760.KS",
        "ÌïúÍµ≠Í∞ÄÏä§Í≥µÏÇ¨": "036460.KS",
        "SK": "034730.KS",
        "GS": "078930.KS",
        "S-Oil": "010950.KS",
        "ÏóêÏì∞Ïò§Ïùº": "010950.KS",
        
        # Í∏∞ÌÉÄ (24Í∞ú)
        "NAVER": "035420.KS",
        "Ïπ¥Ïπ¥Ïò§": "035720.KS",
        "HMM": "011200.KS",
        "LG": "003550.KS",
        "SKÌÖîÎ†àÏΩ§": "017670.KS",
        "KT": "030200.KS",
        "LGÏú†ÌîåÎü¨Ïä§": "032640.KS",
        "Î°ØÎç∞ÏáºÌïë": "023530.KS",
        "Ïã†ÏÑ∏Í≥Ñ": "004170.KS",
        "Ïù¥ÎßàÌä∏": "139480.KS",
        "CJÏ†úÏùºÏ†úÎãπ": "097950.KS",
        "CJ": "001040.KS",
        "ÎåÄÌïúÌï≠Í≥µ": "003490.KS",
        "ÏïÑÏãúÏïÑÎÇòÌï≠Í≥µ": "020560.KS",
        "Ìò∏ÌÖîÏã†Îùº": "008770.KS",
        "ÎÑ∑ÎßàÎ∏î": "251270.KS",
        "ÏóîÏî®ÏÜåÌîÑÌä∏": "036570.KS",
        "ÌéÑÏñ¥ÎπÑÏä§": "263750.KS",
        "ÌÅ¨ÎûòÌîÑÌÜ§": "259960.KS",
        "Ïπ¥Ïπ¥Ïò§Í≤åÏûÑÏ¶à": "293490.KS",
        "Ïπ¥Ïπ¥Ïò§Î±ÖÌÅ¨": "323410.KS",
        "Ïπ¥Ïπ¥Ïò§ÌéòÏù¥": "377300.KS",
        "Ïø†Ìå°": "CPNG",
        "ÌÅ¨ÎûòÌîÑÌÜ§Ïö∞": "259965.KS",
    }
    
    qualified_stocks = []
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    total = len(kospi_symbols)
    
    for idx, (name, symbol) in enumerate(kospi_symbols.items()):
        try:
            status_text.text(f"Î∂ÑÏÑù Ï§ë: {name} ({idx+1}/{total})")
            progress_bar.progress((idx + 1) / total)
            
            data = load_data(symbol, period="3mo")
            if data is None or data.empty:
                continue
            
            data = calculate_indicators(data)
            latest = data.iloc[-1]
            
            # 1. 20Ïùº Ïã†Í≥†Í∞Ä Ï≤¥ÌÅ¨
            high_20d = data['High'][-20:].max()
            is_new_high = latest['Close'] >= high_20d * 0.99  # 99% Ïù¥ÏÉÅÏù¥Î©¥ Ïã†Í≥†Í∞Ä Í∑ºÏ≤ò
            
            # 2. ÌõÑÌñâÏä§Ìå¨Ïù¥ Î≥ºÎ¶∞Ï†ÄÎ∞¥Îìú ÏÉÅÎã® ÎèåÌåå Ï≤¥ÌÅ¨
            is_lagging_above_bb = False
            if pd.notna(latest['Ichimoku_Lagging']) and pd.notna(latest['BB_Upper']):
                is_lagging_above_bb = latest['Ichimoku_Lagging'] > latest['BB_Upper']
            
            # Îëê Ï°∞Í±¥ÏùÑ Î™®Îëê ÎßåÏ°±ÌïòÎäî Ï¢ÖÎ™©Îßå Ï∂îÍ∞Ä
            if is_new_high and is_lagging_above_bb:
                qualified_stocks.append((name, symbol, data, latest))
        
        except Exception as e:
            continue
    
    progress_bar.empty()
    status_text.empty()
    
    # RSI ÎÜíÏùÄ ÏàúÏúºÎ°ú Ï†ïÎ†¨
    qualified_stocks.sort(key=lambda x: x[3]['RSI'] if pd.notna(x[3]['RSI']) else 0, reverse=True)
    
    return qualified_stocks

def display_metrics(data, name):
    """
    Ï£ºÏöî ÏßÄÌëú ÌëúÏãú
    """
    latest = data.iloc[-1]
    previous = data.iloc[-2]
    
    current_price = latest['Close']
    price_change = current_price - previous['Close']
    price_change_pct = (price_change / previous['Close']) * 100
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric(
            label="ÌòÑÏû¨Í∞Ä",
            value=f"{current_price:,.2f}",
            delta=f"{price_change_pct:+.2f}%"
        )
    
    with col2:
        rsi_value = latest['RSI']
        rsi_status = "Í≥ºÎß§Ïàò" if rsi_value > 70 else "Í≥ºÎß§ÎèÑ" if rsi_value < 30 else "Ï§ëÎ¶Ω"
        st.metric(
            label=f"RSI ({rsi_status})",
            value=f"{rsi_value:.2f}"
        )

# ==================== Î©îÏù∏ Ïï± ====================

# ÏÇ¨Ïù¥ÎìúÎ∞î ÏÑ§Ï†ï
with st.sidebar:
    st.header("‚öôÔ∏è ÏÑ§Ï†ï")
    
    # Î∑∞ Î™®Îìú ÏÑ†ÌÉù
    view_mode = st.radio(
        "Î≥¥Í∏∞ Î™®Îìú",
        ["üìä Ï†ÑÏ≤¥ Í∞úÏöî", "üîç ÏÉÅÏÑ∏ Î∂ÑÏÑù"],
        index=0
    )
    
    if view_mode == "üîç ÏÉÅÏÑ∏ Î∂ÑÏÑù":
        # Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù
        selected_category = st.selectbox(
            "ÏûêÏÇ∞ Ïπ¥ÌÖåÍ≥†Î¶¨",
            list(ASSETS.keys())
        )
        
        # ÏûêÏÇ∞ ÏÑ†ÌÉù
        selected_asset = st.selectbox(
            "ÏûêÏÇ∞ ÏÑ†ÌÉù",
            list(ASSETS[selected_category].keys())
        )
    
    # Í∏∞Í∞Ñ ÏÑ†ÌÉù
    period_options = {
        "1Í∞úÏõî": "1mo",
        "3Í∞úÏõî": "3mo",
        "6Í∞úÏõî": "6mo",
        "1ÎÖÑ": "1y",
        "2ÎÖÑ": "2y",
        "5ÎÖÑ": "5y"
    }
    selected_period = st.selectbox(
        "Ï°∞Ìöå Í∏∞Í∞Ñ",
        list(period_options.keys()),
        index=3
    )
    
    st.markdown("---")
    st.markdown("### ‚öôÔ∏è Î≥¥Ï°∞ÏßÄÌëú ÏÑ§Ï†ï")
    
    with st.expander("üìä ÏßÄÌëú ÏÑ§Ï†ïÍ∞í Î≥¥Í∏∞", expanded=False):
        st.markdown("""
        **Ïù¥ÎèôÌèâÍ∑†ÏÑ† (MA)**
        - MA20: 20Ïùº
        - MA50: 50Ïùº
        - MA200: 200Ïùº
        
        **Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú (BB)**
        - Í∏∞Í∞Ñ: 18
        - ÏäπÏàò: 2.00
        
        **RSI**
        - Í∏∞Í∞Ñ: 14
        - Signal: 6
        
        **Stochastic Slow**
        - Í∏∞Í∞Ñ: 10
        - %K: 6
        - %D: 6
        
        **MACD**
        - Îã®Í∏∞: 12
        - Ïû•Í∏∞: 26
        - Signal: 9
        
        **ÏùºÎ™©Í∑†ÌòïÌëú**
        - Ï†ÑÌôòÏÑ†: 9Ïùº
        - Í∏∞Ï§ÄÏÑ†: 26Ïùº
        - ÏÑ†ÌñâÏä§Ìå¨: 52Ïùº
        - ÌõÑÌñâÏä§Ìå¨: 26Ïùº
        """)

# ==================== Ï†ÑÏ≤¥ Í∞úÏöî Î™®Îìú ====================
if view_mode == "üìä Ï†ÑÏ≤¥ Í∞úÏöî":
    
    # Í∞Å Ïπ¥ÌÖåÍ≥†Î¶¨Î≥ÑÎ°ú Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
    for category_name, category_assets in ASSETS.items():
        st.subheader(f"üìå {category_name}")
        
        # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ïª¨Îüº Ïàò Í≤∞Ï†ï
        num_cols = min(4, len(category_assets))
        cols = st.columns(num_cols)
        
        for idx, (asset_name, ticker) in enumerate(category_assets.items()):
            with cols[idx % num_cols]:
                with st.spinner(f'{asset_name} Î°úÎî©...'):
                    data = load_data(ticker, period=period_options[selected_period])
                    
                    if data is not None and not data.empty:
                        latest = data.iloc[-1]
                        previous = data.iloc[-2]
                        
                        current_price = latest['Close']
                        price_change = current_price - previous['Close']
                        price_change_pct = (price_change / previous['Close']) * 100
                        
                        # Ïπ¥Îìú ÌòïÌÉúÎ°ú ÌëúÏãú
                        st.markdown(f"### {asset_name}")
                        st.metric(
                            label="ÌòÑÏû¨Í∞Ä",
                            value=f"{current_price:,.2f}",
                            delta=f"{price_change_pct:+.2f}%"
                        )
                        
                        # Í∞ÑÎã®Ìïú Ï∞®Ìä∏
                        data_with_indicators = calculate_indicators(data)
                        
                        # ÎØ∏Îãà Ï∞®Ìä∏ ÏÉùÏÑ±
                        mini_fig = go.Figure()
                        mini_fig.add_trace(go.Candlestick(
                            x=data.index[-60:],  # ÏµúÍ∑º 60Ïùº (ÌõÑÌñâÏä§Ìå¨ ÌëúÏãú ÏúÑÌï¥)
                            open=data['Open'][-60:],
                            high=data['High'][-60:],
                            low=data['Low'][-60:],
                            close=data['Close'][-60:],
                            increasing_line_color='red',
                            decreasing_line_color='blue',
                            increasing_fillcolor='red',
                            decreasing_fillcolor='blue',
                            showlegend=False,
                            name='Í∞ÄÍ≤©'
                        ))
                        
                        # Ïù¥ÎèôÌèâÍ∑†ÏÑ† Ï∂îÍ∞Ä
                        mini_fig.add_trace(go.Scatter(
                            x=data.index[-60:],
                            y=data_with_indicators['MA20'][-60:],
                            name='MA20',
                            line=dict(color='orange', width=1)
                        ))
                        
                        # Î≥ºÎ¶∞Ï†ÄÎ∞¥Îìú Ï∂îÍ∞Ä
                        mini_fig.add_trace(go.Scatter(
                            x=data.index[-60:],
                            y=data_with_indicators['BB_Upper'][-60:],
                            name='BBÏÉÅÎã®',
                            line=dict(color='gray', width=1, dash='dash'),
                            showlegend=False
                        ))
                        
                        mini_fig.add_trace(go.Scatter(
                            x=data.index[-60:],
                            y=data_with_indicators['BB_Lower'][-60:],
                            name='BBÌïòÎã®',
                            line=dict(color='gray', width=1, dash='dash'),
                            fill='tonexty',
                            fillcolor='rgba(128, 128, 128, 0.1)',
                            showlegend=False
                        ))
                        
                        # ÌõÑÌñâÏä§Ìå¨ Ï∂îÍ∞Ä (Ï£ºÌô©ÏÉâ Ï†êÏÑ†)
                        mini_fig.add_trace(go.Scatter(
                            x=data.index[-60:],
                            y=data_with_indicators['Ichimoku_Lagging'][-60:],
                            name='ÌõÑÌñâÏä§Ìå¨',
                            line=dict(color='orange', width=2, dash='dot')
                        ))
                        
                        mini_fig.update_layout(
                            height=250,
                            margin=dict(l=0, r=0, t=0, b=0),
                            xaxis_rangeslider_visible=False,
                            showlegend=True,
                            legend=dict(
                                orientation="h",
                                yanchor="bottom",
                                y=1.02,
                                xanchor="right",
                                x=1,
                                font=dict(size=8)
                            ),
                            xaxis=dict(showticklabels=False),
                            yaxis=dict(side='right')
                        )
                        
                        st.plotly_chart(mini_fig, use_container_width=True)
                        
                        # Í∏∞Ïà†Ï†Å Î∂ÑÏÑù ÏöîÏïΩ
                        with st.expander("üìä Í∏∞Ïà†Ï†Å Î∂ÑÏÑù ÏöîÏïΩ"):
                            latest_ind = data_with_indicators.iloc[-1]
                            
                            # Î≥ºÎ¶∞Ï†ÄÎ∞¥ÎìúÏôÄ ÌõÑÌñâÏä§Ìå¨ Î∂ÑÏÑù
                            lagging_span = latest_ind['Ichimoku_Lagging']
                            bb_upper = latest_ind['BB_Upper']
                            bb_lower = latest_ind['BB_Lower']
                            
                            # ÌõÑÌñâÏä§Ìå¨Í≥º Î≥ºÎ¶∞Ï†ÄÎ∞¥Îìú Í¥ÄÍ≥Ñ
                            if pd.notna(lagging_span):
                                if lagging_span > bb_upper:
                                    st.write("üî¥ ÌõÑÌñâÏä§Ìå¨ > BBÏÉÅÎã® (Í≥ºÎß§Ïàò)")
                                elif lagging_span < bb_lower:
                                    st.write("üü¢ ÌõÑÌñâÏä§Ìå¨ < BBÌïòÎã® (Í≥ºÎß§ÎèÑ)")
                                elif lagging_span > current_price:
                                    st.write("üü¢ ÌõÑÌñâÏä§Ìå¨ > ÌòÑÏû¨Í∞Ä (Í∞ïÏÑ∏)")
                                elif lagging_span < current_price:
                                    st.write("üî¥ ÌõÑÌñâÏä§Ìå¨ < ÌòÑÏû¨Í∞Ä (ÏïΩÏÑ∏)")
                                else:
                                    st.write("üü° ÌõÑÌñâÏä§Ìå¨ = ÌòÑÏû¨Í∞Ä")
                            
                            st.markdown("---")
                            
                            # RSI
                            rsi = latest_ind['RSI']
                            if rsi > 70:
                                st.write("üî¥ RSI: Í≥ºÎß§Ïàò")
                            elif rsi < 30:
                                st.write("üü¢ RSI: Í≥ºÎß§ÎèÑ")
                            else:
                                st.write(f"üü° RSI: {rsi:.1f}")
                            
                            # MACD
                            if latest_ind['MACD'] > latest_ind['MACD_Signal']:
                                st.write("üü¢ MACD: ÏÉÅÏäπ")
                            else:
                                st.write("üî¥ MACD: ÌïòÎùΩ")
                            
                            # Ïù¥ÎèôÌèâÍ∑†
                            if current_price > latest_ind['MA20']:
                                st.write("‚úÖ MA20 ÏúÑ")
                            else:
                                st.write("‚ùå MA20 ÏïÑÎûò")
                    else:
                        st.error(f"‚ùå {asset_name} Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®")
        
        st.markdown("---")

# ==================== ÏÉÅÏÑ∏ Î∂ÑÏÑù Î™®Îìú ====================
elif view_mode == "üîç ÏÉÅÏÑ∏ Î∂ÑÏÑù":
    # Ìã∞Ïª§ Í∞ÄÏ†∏Ïò§Í∏∞
    ticker = ASSETS[selected_category][selected_asset]

    # Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    with st.spinner(f'{selected_asset} Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...'):
        data = load_data(ticker, period=period_options[selected_period])

    if data is not None and not data.empty:
        # ÏßÄÌëú Í≥ÑÏÇ∞
        data_with_indicators = calculate_indicators(data)
        
        # Ï£ºÏöî ÏßÄÌëú ÌëúÏãú
        st.subheader(f"üìä {selected_asset} ÌòÑÌô©")
        display_metrics(data_with_indicators, selected_asset)
        
        st.markdown("---")
        
        # Í∞ÑÎã®Ìïú Í∞ÄÍ≤© Ï∞®Ìä∏Îßå ÌëúÏãú
        st.subheader(f"üìà {selected_asset} Í∞ÄÍ≤© Ï∞®Ìä∏")
        simple_chart = create_simple_chart(data_with_indicators, selected_asset)
        st.plotly_chart(simple_chart, use_container_width=True)
        
        # KOSPI ÏÑ†ÌÉù Ïãú Ï¢ÖÎ™© Ïä§ÌÅ¨Î¶¨Îãù Í≤∞Í≥º ÌëúÏãú
        if selected_asset == "üá∞üá∑ KOSPI":
            st.markdown("---")
            st.subheader("üîç KOSPI Ï¢ÖÎ™© Ïä§ÌÅ¨Î¶¨Îãù")
            
            with st.spinner("KOSPI 100Í∞ú Ï¢ÖÎ™© Î∂ÑÏÑù Ï§ë... (ÏïΩ 1-2Î∂Ñ ÏÜåÏöî)"):
                qualified_stocks = screen_kospi_stocks()
            
            # Ï°∞Í±¥ÏùÑ ÎßåÏ°±ÌïòÎäî Ï¢ÖÎ™© ÌëúÏãú
            st.info("üìä Ï°∞Í±¥: 20Ïùº Ïã†Í≥†Í∞Ä AND ÌõÑÌñâÏä§Ìå¨ > Î≥ºÎ¶∞Ï†ÄÎ∞¥Îìú ÏÉÅÎã®")
            
            if qualified_stocks:
                st.success(f"‚úÖ {len(qualified_stocks)}Í∞ú Ï¢ÖÎ™©Ïù¥ Ï°∞Í±¥ÏùÑ ÎßåÏ°±Ìï©ÎãàÎã§!")
                
                # 3Ïó¥Î°ú ÌëúÏãú
                num_cols = 3
                for i in range(0, len(qualified_stocks), num_cols):
                    cols = st.columns(num_cols)
                    for j in range(num_cols):
                        idx = i + j
                        if idx < len(qualified_stocks):
                            name, symbol, stock_data, latest_data = qualified_stocks[idx]
                            
                            with cols[j]:
                                st.markdown(f"### {name}")
                                
                                # ÌòÑÏû¨Í∞Ä Î∞è Îì±ÎùΩÎ•†
                                if len(stock_data) >= 2:
                                    prev = stock_data.iloc[-2]
                                    change_pct = ((latest_data['Close'] - prev['Close']) / prev['Close']) * 100
                                    st.metric("ÌòÑÏû¨Í∞Ä", f"{latest_data['Close']:,.0f}Ïõê", f"{change_pct:+.2f}%")
                                else:
                                    st.metric("ÌòÑÏû¨Í∞Ä", f"{latest_data['Close']:,.0f}Ïõê")
                                
                                # RSI ÌëúÏãú
                                rsi = latest_data['RSI']
                                if pd.notna(rsi):
                                    st.metric("RSI", f"{rsi:.1f}")
                                
                                # ÎØ∏Îãà Ï∞®Ìä∏
                                mini_chart = create_mini_chart(stock_data, name)
                                st.plotly_chart(mini_chart, use_container_width=True)
                                
                                st.markdown("---")
            else:
                st.warning("‚ö†Ô∏è ÌòÑÏû¨ Ï°∞Í±¥ÏùÑ ÎßåÏ°±ÌïòÎäî Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.")
                st.info("üí° ÌåÅ: ÏãúÏû• ÏÉÅÌô©Ïóê Îî∞Îùº Ï°∞Í±¥ÏùÑ ÎßåÏ°±ÌïòÎäî Ï¢ÖÎ™©Ïù¥ ÏóÜÏùÑ Ïàò ÏûàÏäµÎãàÎã§.")


    else:
        st.error(f"‚ùå {selected_asset} Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. Îã§Î•∏ ÏûêÏÇ∞ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.")

# Ìë∏ÌÑ∞
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: gray; padding: 20px;'>
    <p>üìä Îç∞Ïù¥ÌÑ∞ Ï∂úÏ≤ò: Yahoo Finance | ‚ö†Ô∏è Ìà¨Ïûê Í≤∞Ï†ïÏùÄ Î≥∏Ïù∏Ïùò Ï±ÖÏûÑÏûÖÎãàÎã§.</p>
    <p>Ïù¥ ÎåÄÏãúÎ≥¥ÎìúÎäî Ï†ïÎ≥¥ Ï†úÍ≥µ Î™©Ï†ÅÏù¥Î©∞, Ìà¨Ïûê Ï°∞Ïñ∏Ïù¥ ÏïÑÎãôÎãàÎã§.</p>
</div>
""", unsafe_allow_html=True)
